from numba import cuda
import cv2 as cv
import numpy as np
import time

@cuda.jit
def matmul(A, B, C):
    i, j = cuda.grid(2)
    if i < C.shape[0] and j < C.shape[1]:
        tmp = 0.
        for k in range(A.shape[1]):
            tmp += A[i, k] * B[k, j]
        C[i, j] = tmp


def matmul_cpu(A, B, C):
    for i in range(len(A)):
        for j in range(len(B[0])):
            for k in range(len(B)):
                C[i][j] += A[i][k] * B[k][j]

def main():
    #input matrices
    size = 100;
    cv.cuda_GpuMat
    a = np.random.rand(size,size)
    b = np.random.rand(size,size)
    c = np.zeros(shape=(size,size))

    # Set the number of threads in a block
    threadsperblock = 32

    # Calculate the number of thread blocks in the grid
    blockspergrid = (a.size + (threadsperblock - 1)) // threadsperblock

    start = time.time()
    # Now start the kernel
    matmul[blockspergrid, threadsperblock](a, b, c)
    end = time.time()

    print(end-start)

    start = time.time()
    # Now start the kernel
    matmul_cpu(a, b, c)
    end = time.time()

    print(end - start)

if __name__ == '__main__':
    main()